// O(n^3)
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ls = new ArrayList<List<Integer>>();
        int len=nums.length;
        for(int i=0;i<len-2;i++){
          for(int j=i+1;j<len-1;j++){
            for(int k=j+1;k<len;k++){
                List<Integer> ls1 = new ArrayList<>();
              if(nums[i]+nums[j]+nums[k]==0){
                   ls1.add(nums[i]);
                   ls1.add(nums[j]);
                   ls1.add(nums[k]);
                   if(!ls.contains(ls1)){
                      ls.add(ls1);
                   }
              }
            }
          }   
        }
        return ls;
    }
}

//O(n^2)

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ls = new ArrayList<List<Integer>>();
        int len=nums.length;
        for(int i=0;i<len-2;i++){
          Set<Integer> hash = new HashSet<>();  
          for(int j=i+1;j<len;j++){
                List<Integer> ls1 = new ArrayList<>();
              int k= -(nums[i]+nums[j]);
              if(hash.contains(k)){
                  ls1.add(nums[i]);
                  ls1.add(nums[j]);
                  ls1.add(k);

                  if(!ls.contains(ls1)){
                    ls.add(ls1);
                  }
              }
              hash.add(nums[j]);
            }
            System.out.println(hash);
          }   
        return ls;
    }
}

//
